<h1 class="text-primary my-4">
  <%= "#{params[:record_index] ? 'Modification' : 'Ajout'} '#{@table.name.humanize}'" %>
</h1>
<%= form_tag fill_do_path(relation: params[:relation], value: params[:value]), multipart: true do %>

  <%= hidden_field_tag :table_id, @table.id %>

  <div class="row row-cols-sm-2 row-cols-lg-3">
    <% @table.fields.ordered.each_with_index do |field, index| %>
      <% field_name = "[data][#{@record_index}][#{field.id}]" %> 
      <% value = field.values.find_by(record_index: @record_index) %> 
      <% field_value = value.data if value %>

      <fieldset class="mb-3">

        <label class="fw-bold d-flex gap-2">
          <span class="material-symbols-outlined text-black-50">
            <%= field.icon %>
          </span>
          <%= (field.obligatoire ? field.name.humanize.insert(0, '* ') : field.name.humanize) %>
        </label>

        <% case field.datatype 
          when 'Texte' %>
          <%= text_field_tag field_name, field_value, autofocus: (index == 0), class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Nombre' %>
          <%= number_field_tag field_name, field_value, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Euros' %>
          <%= number_field_tag field_name, field_value, step: 'any', class: 'form-control w-100', placeholder: "€", required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Date' %>
          <%= text_field_tag field_name, field_value, class: 'form-control w-100', type: 'date', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Oui_non?' %>
          <br>
          <%= radio_button_tag field_name, 'Oui', (field_value == 'Oui'), class:'form-check-input', 'data-testid': field.name %> Oui 
          <%= radio_button_tag field_name, 'Non', (field_value == 'Non'), class:'form-check-input ms-3', 'data-testid': field.name %> Non
        <% when 'Liste' %>
          <%= select_tag field_name, options_for_select(field.items_splitted, field_value), include_blank: true, class: 'form-select w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Formule' %>
          <% if params[:record_index].present? %>
            <% field_value = field.evaluate(@table, @record_index) %>
          <% else %>
            <% field_value = 'n/a' %>
          <% end %>
          <%= text_field_tag field_name, field_value, disabled: true, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Signature' %>
          <div id="signature">
            <%= hidden_field_tag field_name, field_value, 'data-testid': "signature" %>
            <div class="wrapper">
              <canvas id="signature-pad" class="form-control" width=400 height=200></canvas>
            </div>

            <div style="margin-top: 8px;">
              <button id="save" class="btn btn-sm btn-outline-success">Valider cette signature</button>
              <a id="clear" class="btn btn-sm btn-outline-dark">Effacer</a>
            </div>
          </div>
        <% when 'Texte_long' %>
          <%= text_area_tag field_name, field_value, autofocus: (index == 0),col: 10, row: 10, class: 'form-control w-100', 'data-testid': field.name %>
        <% when 'Texte_riche' %>
          <%= rich_text_area_tag field_name, field_value, required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Fichier', 'Image', 'PDF' %>
          <% if field_value %>
            <%= link_to Blob.find(field_value).file_attachment.filename, url_for(Blob.find(field_value).file), class:'w-100', required: field.obligatoire, 'data-testid': field.name %>
          <% end %>
          <br>
          <%= file_field_tag field_name, class:'w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Workflow' %>
          <% items = field.items_splitted.map{|e| e.split(':')}.to_h %>
          <%= select_tag field_name, options_for_select(items.keys, field_value), include_blank: true, class: 'form-select w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'URL' %>
          <%= text_field_tag field_name, field_value, autofocus: (index == 0), class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Couleur' %>
          <br>
          <%= color_field_tag field_name, field_value, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'GPS' %>
          <div data-controller="geolocation" class="input-group">
            <%= text_field_tag field_name, field_value, class: 'form-control', 'data-geolocation-target': 'gpstextfield', required: field.obligatoire, 'data-testid': field.name %>
            <button type="button" data-action="click->geolocation#search" class="btn btn-outline-primary btn-sm p-0" title="Position actuelle">
              <span class="material-symbols-outlined mt-1 px-2">
                my_location
              </span>
            </button>
          </div>
        <% when 'Collection' %>
          <%# Checker si la liste vient d'une autre table %>
          <% if field.is_valid_table_params %>
            <% if params[:relation].present? && Relation.find(params[:relation]).field_id == field.id %>
              <% field_value = params[:value] %>
            <% end %>
            <div class="d-flex align-items-center">
              <%= select_tag field_name, options_for_select(field.populate_linked_table.invert, field_value), include_blank: true, class: 'form-select w-100', required: field.obligatoire, 'data-testid': field.name %> 
              <%= link_to table_path(Table.find(field.relation.relation_with_id)), target: '_blank' do %>
              <% end %>
            </div>
          <% end %>
        <% when 'Utilisateur' %>
          <%= select_tag field_name, options_for_select(@table.users.pluck(:name), field_value), include_blank: true, class: 'form-select w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Vidéo_YouTube' %>
          <%= text_field_tag field_name, field_value, autofocus: (index == 0), class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'QRCode', 'Distance' %>
          <%= text_field_tag field_name, field_value, class: 'form-control w-100', disabled: true, 'data-testid': field.name %>
        <% when 'UUID' %>
          <%= text_field_tag field_name, field_value || SecureRandom.uuid, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Tags' %>
          <%= text_field_tag field_name, field_value, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'Email' %>
          <%= email_field_tag field_name, field_value, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
        <% when 'QRScan' %>
          <%= text_field_tag field_name, field_value, class: 'form-control w-100', required: field.obligatoire, 'data-testid': field.name %>
          <div>
            <a class="button" id="startButton">Start</a>
            <a class="button" id="resetButton">Reset</a>
          </div>
          <div>
            <video id="video" width="300" height="200" style="border: 1px solid gray"></video>
          </div>

          <div id="sourceSelectPanel" style="display:none">
            <label for="sourceSelect">Change video source:</label>
            <select id="sourceSelect" style="max-width:400px">
            </select>
          </div>

          <label>Result:</label>
          <pre><code id="result"></code></pre>
          <script type="text/javascript" src="https://unpkg.com/@zxing/library@latest/umd/index.min.js"></script>
          <script type="text/javascript">
            window.addEventListener('load', function () {
              let selectedDeviceId;
              const codeReader = new ZXing.BrowserMultiFormatReader()
              console.log('ZXing code reader initialized')
              codeReader.listVideoInputDevices()
                .then((videoInputDevices) => {
                  const sourceSelect = document.getElementById('sourceSelect')
                  selectedDeviceId = videoInputDevices[0].deviceId
                  if (videoInputDevices.length >= 1) {
                    videoInputDevices.forEach((element) => {
                      const sourceOption = document.createElement('option')
                      sourceOption.text = element.label
                      sourceOption.value = element.deviceId
                      sourceSelect.appendChild(sourceOption)
                    })

                    sourceSelect.onchange = () => {
                      selectedDeviceId = sourceSelect.value;
                    };

                    const sourceSelectPanel = document.getElementById('sourceSelectPanel')
                    sourceSelectPanel.style.display = 'block'
                  }

                  document.getElementById('startButton').addEventListener('click', () => {
                    codeReader.decodeFromVideoDevice(selectedDeviceId, 'video', (result, err) => {
                      if (result) {
                        console.log(result)
                        document.getElementsByName("<%= field_name %>")[0].value = result.text
                      }
                      if (err && !(err instanceof ZXing.NotFoundException)) {
                        console.error(err)
                        document.getElementsByName("<%= field_name %>")[0].value = err
                      }
                    })
                    console.log(`Started continous decode from camera with id ${selectedDeviceId}`)
                  })

                  document.getElementById('resetButton').addEventListener('click', () => {
                    codeReader.reset()
                    document.getElementById('result').textContent = '';
                    console.log('Reset.')
                  })

                })
                .catch((err) => {
                  console.error(err)
                })
            })
          </script>
        <% end %>
      </fieldset>
    <% end %>
  </div>

  <div class="d-flex flex-wrap align-items-center gap-2 mt-4">
    <%= submit_tag "Enregistrer", class: 'btn btn-outline-primary'%>
    <%= link_to "Annuler", request.referer %>
  </div>
<% end %>


<script>
  var signaturePad = new SignaturePad(document.getElementById('signature-pad'));
  var signatureField = document.querySelector("[data-testid=signature]");
  console.log(signatureField);
  var saveButton = document.getElementById('save');
  var cancelButton = document.getElementById('clear');

  saveButton.addEventListener('click', function (event) {
    event.preventDefault();
    if (!signaturePad.isEmpty()) {
      signatureField.setAttribute('value', signaturePad.toDataURL("image/svg+xml"));
    }
  });

  cancelButton.addEventListener('click', function (event) {
    signaturePad.clear();
    signatureField.setAttribute('value', "");
  });
</script>